openapi: 3.0.3

info:
  version: 0.1.0
  title: Template API Project
  description: Template of complete API project

servers:
  - url: 'localhost:3000'
    description: Local server

paths:
  /healthcheck:
    get:
      description: Check services status.
      responses:
        '200':
          description: Message to confirm the services status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseHealthcheck'

  /users:
    post:
      description: Register new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateUser'
      responses:
        '201':
          description: User data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseCreateUser'

  /sessions:
    post:
      description: Generate access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestGenerateToken'
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGenerateToken'

  /token/refresh:
    post:
      description: Generate refresh token.
      # parameters:
      #   - name: refreshToken
      #     in: cookie
      #     description: Refresh token value.
      #     required: true
      #     schema:
      #       type: string
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseGenerateToken'

  /me:
    get:
     description: Get profile info.
     security:
       - bearerAuth: []
     responses:
      '200':
       description: Method to get user profile info.
       content:
        application/json:
         schema:
          $ref: '#/components/schemas/ResponseGetUserProfile'

  /users/{id}:
    put:
      description: Update user data.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the user to get
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestUpdateUser'
      responses:
        '204':
          description: User updated. No content.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken

  schemas:
    ResponseHealthcheck:
      type: object
      properties:
        message:
          type: string
          example: Server is up!

    RequestCreateUser:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Jonh Doe
        email:
          type: string
          example: jonhdoe@email.com
        password:
          type: string
          example: my_strong_password
    ResponseCreateUser:
      type: object
      required:
        - id
        - name
        - email
        - role
        - created_at
        - updated_at
      properties:
        id:
          type: string
          example: 657559bc-7682-4259-9b76-72c7cb3028ee
        name:
          type: string
          example: Jonh Doe
        email:
          type: string
          example: jonhdoe@email.com
        role:
          type: string
          enum:
            - MEMBER
            - ADMIN
          example: MEMBER
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00.000Z

    RequestGenerateToken:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: jonhdoe@email.com
        password:
          type: string
          example: my_strong_password
    ResponseGenerateToken:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: >-
            956yZDcyDmWrMhJKGLNg/3VL12xvWri?17KQLJilg?HXOv8eXe2!rKu4Qf8ExPGpaFn4cHNlLOhHkit?16JZ5uwswaZkxaz4h286O2IFlu?ehDuSoMsK2PzkTVb7QTfESeTPsDat7b1Rt1cbp6T8Sca=K1Fs7nCqEe1VI0GcR1pWtL4kWLVJ6u810Tgp8ndGXFtDA/yVHbD?ZJa-GAVQNOZVOqrn8WkUgxZcdyd89VtxTDAAfREkq8zjn=9waGm!

    ResponseGetUserProfile:
      type: object
      properties:
        id:
          type: string
          example: 657559bc-7682-4259-9b76-72c7cb3028ee
        name:
          type: string
          example: Jonh Doe
        email:
          type: string
          example: jonhdoe@email.com
        role:
          type: string
          enum:
            - MEMBER
            - ADMIN
          example: MEMBER
        created_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00.000Z
        updated_at:
          type: string
          format: date-time
          example: 2021-01-01T00:00:00.000Z

    RequestUpdateUser:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Jonh Doe
        email:
          type: string
          example: jonhdoe@email.com
        password:
          type: string
          example: my_strong_password
